- hosts: metrics_server
  name: Create user with password and ssh key
  remote_user: root
  tasks:
    - import_role:
        name: user
      vars:
        user_name: '{{ metrics_server.username }}'
        user_password: "{{ metrics_server.password | password_hash('sha512') }}"
        user_ssh_key_save_path: '{{ metrics_server.sshkey_save_path }}'
        user_ssh_key_file: '.ssh/{{ metrics_server.username }}_id_rsa'
  ignore_errors: yes
  ignore_unreachable: yes

- name: Evaluating the authentication agent & adding the key...
  hosts: localhost
  connection: local
  tasks:
    - import_role:
        name: sshadd
      vars:
        sshadd_key_path:  '{{ metrics_server.sshkey_save_path }}/{{ metrics_server.username }}_id_rsa'

- name: 'Allow HTTP for letsencrypt challenge'
  hosts: metrics_server
  remote_user: '{{ metrics_server.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ metrics_server.password }}'
  tasks:
    - import_role:
        name: firewall
      vars:
        firewall_rules:
        - rule: allow
          port: 80

- name: 'Create letsencrypt cert'
  hosts: metrics_server
  remote_user: '{{ metrics_server.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ metrics_server.password }}'
  tasks:
    - import_role:
        name: letsencrypt
      vars:
        letsencrypt_domain_name: '{{ metrics_server.domain_name }}'
        letsencrypt_username: '{{ metrics_server.username }}'
        letsencrypt_email: '{{ metrics_server.email }}'
        letsencrypt_dir: '{{ metrics_server.cert_dir }}'

- name: 'Tune SSH, install packages, golang, set FW'
  hosts: metrics_server
  remote_user: '{{ metrics_server.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ metrics_server.password }}'
  tasks:
    - import_role:
        name: apt
    - import_role:
        name: ssh
      vars:
        username: '{{ metrics_server.username }}'
    - import_role:
        name: firewall
      vars:
        firewall_rules:
        - rule: allow
          port: 3000

- hosts: metrics_server
  remote_user: '{{ metrics_server.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ metrics_server.password }}'
  tasks:
    - import_role:
        name: nodexp
      vars:
        nodexp_tls: no

- name: Install root cert to allow prometheus scrape nodes
  hosts: metrics_server
  remote_user: '{{ metrics_server.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ metrics_server.password }}'
  tasks:
    - copy:
        src: '{{ ca.prometheus.root_path }}/{{ ca.prometheus.root_cert_name }}'
        dest: '{{ metrics_server.cert_trust_store }}'
        owner: root
        group: root
        mode: 'u=rw,g=r,o=r'
        force: yes
    - ansible.builtin.shell: update-ca-certificates

- name: Install prometheus
  hosts: metrics_server
  remote_user: '{{ metrics_server.username }}'
  vars:
    - ansible_become_password: '{{ metrics_server.password }}'
  tasks:
    - import_role:
        name: prometheus
      vars:
        prometheus_nodes: '{{ metrics_server.prometheus.nodes }}'
        prometheus_cosmos_validators: '{{ metrics_server.prometheus.cosmos_validators }}'
        prometheus_filesystem_avail_alert_percent: 5
        prometheus_inodes_avail_alert_percent: 5
        prometheus_service_alert: "node_exporter.service|cosmos_exporter.service|cosmovisor.service|kujira-price-feeder.service"
        prometheus_mem_avail_alert_percent: 5
        prometheus_wallet_tokens_low_alert_threshold: '{{ metrics_server.prometheus.wallet_tokens_low_alert_threshold }}'

- name: Install grafana
  hosts: metrics_server
  remote_user: '{{ metrics_server.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ metrics_server.password }}'
  tasks:
    - import_role:
        name: grafana
      vars:
        grafana_security_config:
          tls_path: '{{ metrics_server.cert_dir }}'
          cert_file: '{{ metrics_server.domain_name }}-fullchain.crt'
          key_file: '{{ metrics_server.domain_name }}.key'
          username: '{{ metrics_server.username }}'
          password: '{{ metrics_server.password }}'

- name: Install alertmanager
  hosts: metrics_server
  remote_user: '{{ metrics_server.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ metrics_server.password }}'
  tasks:
    - import_role:
        name: cloudalchemy.alertmanager
      vars:
        alertmanager_version: latest
        alertmanager_receivers:
        - name: 'telegram'
          telegram_configs:
          - api_url: 'https://api.telegram.org'
            bot_token: '{{ telegram_bot_token }}'
            chat_id: "{{ chat_id }}" # take from inventory due to weird integer var behavior
            disable_notifications: false
            http_config:
              follow_redirects: true
            send_resolved: true
            parse_mode: HTML
        alertmanager_route:
          group_by: ['alertname', 'cluster', 'service']
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 3h
          receiver: 'telegram'
